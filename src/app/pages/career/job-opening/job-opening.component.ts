import { Component } from '@angular/core';
import { FormGroup, UntypedFormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { CareerService } from 'src/app/core/services/career.service';

@Component({
  selector: 'app-job-opening',
  templateUrl: './job-opening.component.html',
  styleUrls: ['./job-opening.component.scss']
})
export class JobOpeningComponent {
  breadCrumbItems!: Array<{}>;
  submitted = false;
  validationForm!: FormGroup;
  jobOpeningData: any = [];
  page = 1;
  pageSize = 10;
  collectionSize = 0;
  paginateData: any = [];
  editMode = false;
  currentJobId: string | null = null;
  isOpen: boolean = true
  constructor(
    public toastr: ToastrService,
    public careerService: CareerService,
    public router: Router,
    public formBuilder: UntypedFormBuilder
  ) { }

  ngOnInit(): void {
    this.breadCrumbItems = [
      { label: 'Career' },
      { label: 'Job Openings', active: true }
    ];
    this.validationForm = this.formBuilder.group({
      jobtitle: ['', [Validators.required]],
      department: [null, [Validators.required]],   // ðŸ‘ˆ use null not ''
      jobtype: [null, [Validators.required]],      // ðŸ‘ˆ use null not ''
      location: ['', [Validators.required]],
      experience: [null, [Validators.required]],   // ðŸ‘ˆ use null not ''
      salary: [''],
      description: ['', [Validators.required]],
      skills: ['', [Validators.required]],
      qualification: ['', [Validators.required]],
      openings: ['', [Validators.required, Validators.min(1)]],
      isactive: [true]
    });


    this.loadJobOpenings();
  }

  get f() { return this.validationForm.controls; }
  JobList() {
    this.isOpen = true
  }
  addJobOpenings() {
    this.validationForm.reset();
    this.isOpen = false;
  }
  submitJobOpeningsDetails() {
    this.submitted = true;
    if (this.validationForm.valid) {
      const data = {
        ...this.validationForm.value,
        isactive: this.validationForm.value.isactive ? 1 : 0
      };
      data.id = ''; // Will be generated by the backend
      this.careerService.saveJobOpeningDetails(data).subscribe((res: any) => {
        if (res.success) {
          this.toastr.success('Job Opening saved successfully', 'Saved', { timeOut: 3000 });
          this.resetForm();
          this.loadJobOpenings();
        } else {
          this.toastr.error('Failed to save job opening', 'Error', { timeOut: 3000 });
        }
      });
    }
  }

  updateJobOpeningsDetails() {
    this.submitted = true;
    if (this.validationForm.valid && this.currentJobId) {
      const data = {
        ...this.validationForm.value,
        id: this.currentJobId,
        isactive: this.validationForm.value.isactive ? 1 : 0
      };
      this.careerService.updateJobOpening(data).subscribe((res: any) => {
        if (res.success) {
          this.toastr.success('Job Opening updated successfully', 'Updated', { timeOut: 3000 });
          this.resetForm();
          this.loadJobOpenings();
        } else {
          this.toastr.error('Failed to update job opening', 'Error', { timeOut: 3000 });
        }
      });
    }
  }

  getPagintaion() {
    this.paginateData = this.jobOpeningData
      .slice((this.page - 1) * this.pageSize, (this.page - 1) * this.pageSize + this.pageSize);
  }

  toggleOpeningStatus(c: any) {
    c.isactive = !c.isactive;
    this.careerService.updateJobOpeningActiveDeactive(c).subscribe((res: any) => {
      if (res.success) {
        this.toastr.success(`Job Opening ${c.isactive ? 'activated' : 'deactivated'} successfully`, c.isactive ? 'Activated' : 'Deactivated', { timeOut: 3000 });
      } else {
        this.toastr.error('Failed to update job opening status', 'Error', { timeOut: 3000 });
      }
    });
  }

  removeJobOpeningsData(id: string) {
    this.careerService.deleteJobOpening(id).subscribe((res: any) => {
      if (res.success) {
        this.toastr.success('Job Opening deleted successfully', 'Deleted', { timeOut: 3000 });
        this.loadJobOpenings();
      } else {
        this.toastr.error('Failed to delete job opening', 'Error', { timeOut: 3000 });
      }
    });
  }

  editJobOpening(id: string) {
    const job = this.jobOpeningData.find((j: any) => j.id === id);
    if (job) {
      this.isOpen = false;
      this.editMode = true;
      this.currentJobId = id;
      this.validationForm.patchValue({
        ...job,
        isactive: job.isactive === 1
      });
    }
  }

  resetForm() {
    this.submitted = false;
    this.editMode = false;
    this.currentJobId = null;
    this.validationForm.reset({
      department: null,
      jobtype: null,
      experience: null,
      isactive: true
    });
  }


  loadJobOpenings() {
    this.careerService.getAllJobOpenings().subscribe((res: any) => {
      this.jobOpeningData = res;
      for (let i = 0; i < this.jobOpeningData.length; i++) {
        this.jobOpeningData[i].index = i + 1;
      }
      this.collectionSize = this.jobOpeningData.length;
      this.getPagintaion();
    });
  }
}